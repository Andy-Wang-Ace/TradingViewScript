// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// This script is based on the work by LonesomeTheBlue.
// Original source: https://cn.tradingview.com/script/va09eWAp-Support-Resistance-Dynamic-v2/

// This script enhances the original "Support Resistance - Dynamic v2"  by me by adding additional features: 
// 1. support displaying or hiding the uppper level and down level
// 2. support displaying or hiding the middle level
// 3. modifing the function check_sr by rewriting more readable code
// 4. add a lot of addtional comment to explaing the code

//@version=5
indicator('Support Resistance - Dynamic v2', 'SR-Noodles', overlay=true)

// 1. Parameter Settings

// Select how much range to determine if it is an extreme point
prd = input.int(defval=10, title='Pivot Period', minval=4, maxval=30, group='Setup')

// Data Source Selection
ppsrc = input.string(defval='High/Low', title='Source', options=['High/Low', 'Close/Open'], group='Setup')

// Maximum number of pivot points maintained
maxnumpp = input.int(defval=20, title=' Maximum Number of Pivot', minval=5, maxval=100, group='Setup')

// Assumed range of overlap for pivot points
ChannelW = input.int(defval=10, title='Maximum Channel Width %', minval=1, group='Setup')

// Maximum number of support/resistance levels displayed
maxnumsr = input.int(defval=5, title=' Maximum Number of S/R', minval=1, maxval=10, group='Setup')

// Number of times it appears within the range of the pivot points to be considered as a support or resistance price
min_strength = input.int(defval=3, title=' Minimum Strength', minval=1, maxval=10, group='Setup')

// Settings related to drawing
labelloc = input.int(defval=15, title='Label Location', group='Colors', tooltip='Positive numbers reference future bars, negative numbers reference histical bars')
linestyle = input.string(defval='Dashed', title='Line Style', options=['Solid', 'Dotted', 'Dashed'], group='Colors')
linewidth = input.int(defval=2, title='Line Width', minval=1, maxval=4, group='Colors')
resistancecolor = input.color(defval=color.red, title='Resistance Color', group='Colors')
supportcolor = input.color(defval=color.lime, title='Support Color', group='Colors')
Lstyle = linestyle == 'Dashed' ? line.style_dashed : linestyle == 'Solid' ? line.style_solid : line.style_dotted

// Whether to display pivot points
showpp = input(true, title='Show Point Points')
bool showLevel = input(true, title='Show Up/Down Level')
bool showMidLevel = input(true, title='Show Mid Level')

// 2. Decision Making & Drawing of Pivot Points
float src1 = ppsrc == 'High/Low' ? high : math.max(close, open)
float src2 = ppsrc == 'High/Low' ? low : math.min(close, open)
float ph = ta.pivothigh(src1, prd, prd)
float pl = ta.pivotlow(src2, prd, prd)
plotshape(ph and showpp, text='H', style=shape.labeldown, color=na, textcolor=color.new(color.red, 0), location=location.abovebar, offset=-prd)
plotshape(pl and showpp, text='L', style=shape.labelup, color=na, textcolor=color.new(color.lime, 0), location=location.belowbar, offset=-prd)

// 2.2 Maintain the number of pivot points (continuously maintained between different bars, FIFO)
var pivotvals = array.new_float(0)
if ph or pl
    array.unshift(pivotvals, ph ? ph : pl)
    if array.size(pivotvals) > maxnumpp  // limit the array size
        array.pop(pivotvals)
        log.warning("pivotvals:{0}",pivotvals)

// 2.3 Calculating the range of pivot zones
// Finding the range for support and resistance: (300-day high - 300-day low) * channel width percentage
prdhighest = ta.highest(300)
prdlowest = ta.lowest(300)
cwidth = (prdhighest - prdlowest) * ( ChannelW / 100 ) 

// Obtain the number of pivot points within the range based on pivotvals[ind] and the smallest and largest extremes
get_sr_vals(ind) =>
    float lo = array.get(pivotvals, ind)
    float hi = lo
    float hiPlusCidWith = hi + cwidth
    float loMinusCidWith = lo - cwidth
    int numpp = 0
    for y = 0 to array.size(pivotvals) - 1 by 1
        float cpp = array.get(pivotvals, y)
        if cpp >= loMinusCidWith and cpp <= hiPlusCidWith
            numpp += 1
            hi := cpp > hi ? cpp : hi
            lo := cpp < lo ? cpp : lo
    [hi, lo, numpp]

var sr_up_level = array.new_float(0)
var sr_dn_level = array.new_float(0)

sr_strength = array.new_float(0)

// Function to find the location in a decreasing array where strength can be inserted
find_loc(strength) =>
    ret = array.size(sr_strength)
    for i = ret > 0 ? array.size(sr_strength) - 1 : na to 0 by 1
        if strength <= array.get(sr_strength, i)
            break
        ret := i
        ret
    ret

// Check if a given support or resistance range (defined by highest and lowest prices) overlaps with existing key price ranges.
// If there is an overlap, determine which has greater strength. If the current strength is stronger, then delete the old key price range. If the current strength is weaker, then do not adjust the support/resistance levels. As long as there is an overlap, the current loop terminates (since the current strength is sorted in descending order, thus immediately satisfying the strength comparison can be considered a key range, so the loop can directly terminate)
// Because: The current range can be added to the key range array in several scenarios: 1. The key price range and the current range do not overlap 2. The key price range and the current range overlap, and the current price range has stronger strength.
check_sr(hi, lo, strength) =>
    ret = true
    for i = 0 to array.size(sr_up_level) > 0 ? array.size(sr_up_level) - 1 : na by 1
        //included?
        if array.get(sr_up_level, i) >= lo and array.get(sr_up_level, i) <= hi or array.get(sr_dn_level, i) >= lo and array.get(sr_dn_level, i) <= hi
            if strength >= array.get(sr_strength, i)
                array.remove(sr_strength, i)
                array.remove(sr_up_level, i)
                array.remove(sr_dn_level, i)
                ret
            else
                ret := false
                ret
            break
    ret

var sr_lines = array.new_line(11, na)
var sr_up_lines = array.new_line(11, na)
var sr_down_lines = array.new_line(11, na)
var sr_labels = array.new_label(11, na)
var sr_up_labels = array.new_label(11, na)
var sr_down_labels = array.new_label(11, na)

// When it's not a ph or pl, update the distance from the support or resistance line and the price difference.
for x = 0 to array.size(sr_labels) > 0 ? array.size(sr_labels) - 1 : na by 1
    if showMidLevel
        rate = 100 * (label.get_y(array.get(sr_labels, x)) - close) / close
        label.set_text(array.get(sr_labels, x), text=str.tostring(label.get_y(array.get(sr_labels, x))) + '(' + str.tostring(rate, '#.##') + '%)')
        //label.set_text(array.get(sr_labels, x), text= str.tostring(label.get_y(array.get(sr_labels, x))) + '(' + str.tostring(rate, '#.##') + '%, ' + str.tostring(array.get(sr_strength, x)) + ' count)' )
        label.set_x(array.get(sr_labels, x), x=bar_index + labelloc * ( x * 2 + 1))
        label.set_color(array.get(sr_labels, x), color=label.get_y(array.get(sr_labels, x)) >= close ? color.red : color.lime)
        label.set_textcolor(array.get(sr_labels, x), textcolor=label.get_y(array.get(sr_labels, x)) >= close ? color.white : color.black)
        label.set_style(array.get(sr_labels, x), style=label.style_label_center)
        
        line.set_color(array.get(sr_lines, x), color=line.get_y1(array.get(sr_lines, x)) >= close ? resistancecolor : supportcolor)

for x = 0 to array.size(sr_up_labels) > 0 ? array.size(sr_up_labels) - 1 : na by 1    
    if showLevel
        upRate = 100 * (label.get_y(array.get(sr_up_labels, x)) - close) / close
        label.set_text(array.get(sr_up_labels, x), text="High:" + str.tostring(label.get_y(array.get(sr_up_labels, x))) + '(' + str.tostring(upRate, '#.##') + '%)')
        label.set_x(array.get(sr_up_labels, x), x=bar_index + labelloc * ( x * 2 + 1))
        label.set_color(array.get(sr_up_labels, x), color.silver)
        label.set_textcolor(array.get(sr_up_labels, x), textcolor=label.get_y(array.get(sr_up_labels, x)) >= close ? color.white : color.black)
        label.set_style(array.get(sr_up_labels, x), style=label.style_label_down)

        line.set_color(array.get(sr_up_lines, x) , color=color.blue)

for x = 0 to array.size(sr_down_labels) > 0 ? array.size(sr_down_labels) - 1 : na by 1    
    if showLevel
        downRate = 100 * (label.get_y(array.get(sr_down_labels, x)) - close) / close
        label.set_text(array.get(sr_down_labels, x), text="Low:" + str.tostring(label.get_y(array.get(sr_down_labels, x))) + '(' + str.tostring(downRate, '#.##') + '%)')
        label.set_x(array.get(sr_down_labels, x), x=bar_index + labelloc * ( x * 2 + 1))
        label.set_color(array.get(sr_down_labels, x), #e7b8f0)
        label.set_textcolor(array.get(sr_down_labels, x), textcolor=label.get_y(array.get(sr_down_labels, x)) >= close ? color.white : color.black)
        label.set_style(array.get(sr_down_labels, x), style=label.style_label_up)

        line.set_color(array.get(sr_down_lines, x), color=color.blue)

if ph or pl
    // Because of new calculation, remove old S/R levels
    array.clear(sr_up_level)
    array.clear(sr_dn_level)
    array.clear(sr_strength)
    // Find S/R zones
    for x = 0 to array.size(pivotvals) - 1 by 1
        // 1. Calculate the number of pivot points based on each pivot point within the cwidth range above and below
        [hi, lo, strength] = get_sr_vals(x)
        // 2. Update the key positions if certain conditions are met
        if check_sr(hi, lo, strength)
            loc = find_loc(strength)
            // If strength is in the first maxnumsr sr then insert it into the arrays
            if strength >= min_strength and loc < maxnumsr
                // If compliant, then as a key position
                array.insert(sr_strength, loc, strength)
                array.insert(sr_up_level, loc, hi)
                array.insert(sr_dn_level, loc, lo)
                // If the number of key positions exceeds the maximum number analyzed, then the tail end (the smallest support point key position) is removed
                if array.size(sr_strength) > maxnumsr
                    array.pop(sr_strength)
                    array.pop(sr_up_level)
                    array.pop(sr_dn_level)

    for x = 0 to array.size(sr_lines) > 0 ? array.size(sr_lines) - 1 : na by 1
        line.delete(array.get(sr_lines, x))
        label.delete(array.get(sr_labels, x))
    for x = 0 to array.size(sr_up_lines) > 0 ? array.size(sr_up_lines) - 1 : na by 1
        line.delete(array.get(sr_up_lines, x))
        label.delete(array.get(sr_up_labels, x))
    for x = 0 to array.size(sr_down_lines) > 0 ? array.size(sr_down_lines) - 1 : na by 1
        line.delete(array.get(sr_down_lines, x))
        label.delete(array.get(sr_down_labels, x))    
    

    for x = 0 to array.size(sr_up_level) > 0 ? array.size(sr_up_level) - 1 : na by 1
        if showMidLevel
            // Draw the support and resistance line prices and the price difference from the current price
            float mid = math.round_to_mintick((array.get(sr_up_level, x) + array.get(sr_dn_level, x)) / 2)
            rate = 100 * (mid - close) / close
            // [Function] Draw comments
            array.set(sr_labels, x + 1, label.new(x=bar_index + labelloc * ( x * 2 + 1), y=mid, text=str.tostring(mid) + '(' + str.tostring(rate, '#.##') + '%)', color=mid >= close ? color.red : color.lime, textcolor=mid >= close ? color.white : color.black, style=label.style_label_center))
            //  [Function] Draw lines
            array.set(sr_lines, x + 1, line.new(x1=bar_index, y1=mid, x2=bar_index - 1, y2=mid, extend=extend.both, color=mid >= close ? resistancecolor : supportcolor, style=Lstyle, width=linewidth))

        if showLevel
            // Draw the upper support position
            upLevel = array.get(sr_up_level, x)
            upRate = 100 * ( upLevel - close) / close
            //  [Function] Draw lines
            array.set(sr_up_lines, x + 1, line.new(x1=bar_index, y1=array.get(sr_up_level, x), x2=bar_index - 1, y2=array.get(sr_up_level, x), extend=extend.both, color=color.blue, style=line.style_dotted, width=2))
            //  [Function] Draw comments
            array.set(sr_up_labels, x + 1, label.new(x=bar_index + labelloc * ( x * 2 + 1), y=upLevel, text="Low:" + str.tostring(upRate) + '(' + str.tostring(upRate, '#.##') + '%)', color=color.silver, textcolor=upLevel >= close ? color.white : color.black, style=label.style_label_down))
        
            // Draw the lower support position
            downLevel = array.get(sr_dn_level, x)
            downRate = 100 * ( downLevel - close) / close
            //  [Function] Draw lines
            array.set(sr_down_lines, x + 1, line.new(x1=bar_index, y1=array.get(sr_dn_level, x), x2=bar_index - 1, y2=array.get(sr_dn_level, x), extend=extend.both, color=color.blue, style=line.style_dotted, width=2))
            //  [Function] Draw comments
            array.set(sr_down_labels, x + 1, label.new(x=bar_index + labelloc * ( x * 2 + 1), y=downLevel, text="High:" + str.tostring(downRate) + '(' + str.tostring(downRate, '#.##') + '%)', color=#e7b8f0, textcolor=downLevel >= close ? color.white : color.black, style=label.style_label_up))